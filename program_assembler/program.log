KCPSM6 Assembler log file for program 'D:\Documents\School\CSD LAB\FIN\program_assembler\picoblaze\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 30 Apr 2015
Assembly timestamp: 15:11:36

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: FFF hex
Nominal program memory size: 4K (4096)   address(11:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 823
Memory locations available: 3273


Assembly listing

 Addr Code                        Instruction

 000                              ;================================================================
 000                              ; Port address definitions...
 000                              ;================================================================
 000                              CONSTANT ram_com_PORT, 00                   ; RAM command port (bit[3] == ff, bit[2] = ram active, bit[1] = delete, bit[0] = read(1)/write(0))
 000                              CONSTANT ram_start_addr_PORT1, 01           ; RAM address to start read/write
 000                              CONSTANT ram_start_addr_PORT2, 06           ; 26 bits requires 4 ports
 000                              CONSTANT ram_start_addr_PORT3, 07           ;
 000                              CONSTANT ram_start_addr_PORT4, 08           ;
 000                              CONSTANT ram_stop_addr_PORT1, 02            ; RAM address to stop read/write
 000                              CONSTANT ram_stop_addr_PORT2, 09            ;
 000                              CONSTANT ram_stop_addr_PORT3, 0A            ;
 000                              CONSTANT ram_stop_addr_PORT4, 0B            ;
 000                              CONSTANT lcd_com_PORT, 03                   ; LCD command port (bit[2:0] = en, rw, rs)
 000                              CONSTANT lcd_data_PORT, 04                  ; LCD data port
 000                              CONSTANT volume_PORT, 05                    ; volume control
 000                              CONSTANT write_stop_addr_PORT1, 0C          ; stop addr after write/pause
 000                              CONSTANT write_stop_addr_PORT2, 0D          ;
 000                              CONSTANT write_stop_addr_PORT3, 0E          ;
 000                              CONSTANT write_stop_addr_PORT4, 0F          ;
 000                              CONSTANT test_PORT, FF                      ; used for testing
 000                              NAMEREG s3, cur_sel_REG
 000                              NAMEREG s4, scratch_start_REG
 000                              NAMEREG s5, scratch_stop_REG
 000                              NAMEREG s6, paused_REG
 000                              NAMEREG s7, mem_full_REG
 000                              NAMEREG s8, rec_num_REG
 000                              NAMEREG s9, volume_REG
 000                              NAMEREG sA, int_c_REG
 000                              NAMEREG sB, ram_c_REG
 000                              NAMEREG sC, lcd_c_REG
 000                              NAMEREG sD, lcd_d_REG
 000                              NAMEREG sE, char_REG
 000                              NAMEREG sF, state_REG
 000                              ;================================================================
 000                              ; Actual assembly program goes here...
 000                              ;
 000                              ; NOTE: size limit is 4096 lines of actual assembly code
 000                              ;       Old documentation says it is 1024. This is now incorrect.
 000                              ;================================================================
 000                              ADDRESS 000
 000  28000                       DISABLE INTERRUPT
 001  01F04                       LOAD sF[state_REG], 04                      ; initial state PLAY
 002  0190C                       LOAD s9[volume_REG], 0C                     ; volume initially at
 003  01504                       LOAD s5[scratch_stop_REG], 04               ; init stop loc, start is already 00
 004  2016F                       CALL 16F[set_ram_inactive]
 005  28001         wait_for_int: ENABLE INTERRUPT                            ; wait for first button press
 006  1DA01                       COMPARE sA[int_c_REG], 01                   ; left button
 007  32025                       JUMP Z, 025[left_b]
 008  1DA02                       COMPARE sA[int_c_REG], 02                   ; right button
 009  3202E                       JUMP Z, 02E[right_b]
 00A  1DA03                       COMPARE sA[int_c_REG], 03                   ; center button
 00B  32037                       JUMP Z, 037[center_b]
 00C  1DA04                       COMPARE sA[int_c_REG], 04                   ; up button
 00D  3204A                       JUMP Z, 04A[up_b]
 00E  1DA05                       COMPARE sA[int_c_REG], 05                   ; down button
 00F  3204F                       JUMP Z, 04F[down_b]
 010  1DA06                       COMPARE sA[int_c_REG], 06                   ; memory full
 011  32143                       JUMP Z, 143[mem_full]
 012  1DA07                       COMPARE sA[int_c_REG], 07                   ; ram op done
 013  32147                       JUMP Z, 147[ram_op_done]
 014  22005                       JUMP 005[wait_for_int]
 015  28000                 menu: DISABLE INTERRUPT
 016  1DF06                       COMPARE sF[state_REG], 06                   ; print "PLAY message list"
 017  321F9                       JUMP Z, 1F9[print_messages]
 018  1DF05                       COMPARE sF[state_REG], 05                   ; print "DELETE message list"
 019  321F9                       JUMP Z, 1F9[print_messages]
 01A  1DF04                       COMPARE sF[state_REG], 04                   ; print "PLAY"
 01B  3223C                       JUMP Z, 23C[print_play]
 01C  1DF03                       COMPARE sF[state_REG], 03                   ; print "RECORD"
 01D  32253                       JUMP Z, 253[print_record]
 01E  1DF02                       COMPARE sF[state_REG], 02                   ; print "DELETE"
 01F  32176                       JUMP Z, 176[print_del]
 020  1DF01                       COMPARE sF[state_REG], 01                   ; print "DELETE ALL"
 021  321C3                       JUMP Z, 1C3[print_del_all]
 022  1DF00                       COMPARE sF[state_REG], 00                   ; print "VOLUME"
 023  321AE                       JUMP Z, 1AE[print_volume]
 024  22005                       JUMP 005[wait_for_int]                      ; endlessly loop
 025  28000               left_b: DISABLE INTERRUPT
 026  01A00                       LOAD sA[int_c_REG], 00                      ; unload interrupt
 027  1DF00                       COMPARE sF[state_REG], 00                   ; volume control
 028  3207E                       JUMP Z, 07E[dec_vol]
 029  1DF05                       COMPARE sF[state_REG], 05                   ; previous message
 02A  3009B                       CALL Z, 09B[dec_scratch_pointer]
 02B  1DF06                       COMPARE sF[state_REG], 06                   ; previous message
 02C  3009B                       CALL Z, 09B[dec_scratch_pointer]
 02D  22015                       JUMP 015[menu]
 02E  28000              right_b: DISABLE INTERRUPT
 02F  01A00                       LOAD sA[int_c_REG], 00                      ; unload interrupt
 030  1DF00                       COMPARE sF[state_REG], 00                   ; volume control
 031  32079                       JUMP Z, 079[inc_vol]
 032  1DF05                       COMPARE sF[state_REG], 05                   ; previous message
 033  3008F                       CALL Z, 08F[inc_scratch_pointer]
 034  1DF06                       COMPARE sF[state_REG], 06                   ; previous message
 035  3008F                       CALL Z, 08F[inc_scratch_pointer]
 036  22015                       JUMP 015[menu]
 037  28000             center_b: DISABLE INTERRUPT
 038  01A00                       LOAD sA[int_c_REG], 00                      ; unload
 039  1DF01                       COMPARE sF[state_REG], 01                   ; delete all
 03A  32058                       JUMP Z, 058[del_all]
 03B  1DF02                       COMPARE sF[state_REG], 02
 03C  32047                       JUMP Z, 047[del_msgs]
 03D  1DF03                       COMPARE sF[state_REG], 03                   ; record
 03E  320FE                       JUMP Z, 0FE[record]
 03F  1DF04                       COMPARE sF[state_REG], 04                   ; play
 040  32044                       JUMP Z, 044[play_msgs]
 041  1DF06                       COMPARE sF[state_REG], 06
 042  320B2                       JUMP Z, 0B2[play]
 043  22015                       JUMP 015[menu]
 044  28000            play_msgs: DISABLE INTERRUPT
 045  01F06                       LOAD sF[state_REG], 06                      ; change state to play messages
 046  22015                       JUMP 015[menu]
 047  28000             del_msgs: DISABLE INTERRUPT
 048  01F05                       LOAD sF[state_REG], 05                      ; change state to del messages
 049  22015                       JUMP 015[menu]
 04A  28000                 up_b: DISABLE INTERRUPT                           ; scroll menu up
 04B  01A00                       LOAD sA[int_c_REG], 00                      ; unload interrupt
 04C  1DF04                       COMPARE sF[state_REG], 04                   ; no action if at top
 04D  32015                       JUMP Z, 015[menu]
 04E  22150                       JUMP 150[inc_state]
 04F  28000               down_b: DISABLE INTERRUPT                           ; scroll menu down
 050  01A00                       LOAD sA[int_c_REG], 00                      ; unload interrupt
 051  1DF05                       COMPARE sF[state_REG], 05
 052  32083                       JUMP Z, 083[ret_menu]
 053  1DF06                       COMPARE sF[state_REG], 06
 054  32083                       JUMP Z, 083[ret_menu]
 055  1DF00                       COMPARE sF[state_REG], 00                   ; no action if at bottom
 056  32015                       JUMP Z, 015[menu]
 057  22157                       JUMP 157[dec_state]
 058  28000              del_all: DISABLE INTERRUPT
 059  01000                       LOAD s0, 00                                 ; load first ram addr
 05A  2D001                       OUTPUT s0, 01[ram_start_addr_PORT1]
 05B  2D006                       OUTPUT s0, 06[ram_start_addr_PORT2]
 05C  2D007                       OUTPUT s0, 07[ram_start_addr_PORT3]
 05D  2D008                       OUTPUT s0, 08[ram_start_addr_PORT4]
 05E  010E0                       LOAD s0, E0                                 ; load 1FFFFFE0 as stop addr
 05F  2D002                       OUTPUT s0, 02[ram_stop_addr_PORT1]          ; avoids triggering mem_full
 060  010FF                       LOAD s0, FF
 061  2D009                       OUTPUT s0, 09[ram_stop_addr_PORT2]
 062  2D00A                       OUTPUT s0, 0A[ram_stop_addr_PORT3]
 063  0101F                       LOAD s0, 1F
 064  2D00B                       OUTPUT s0, 0B[ram_stop_addr_PORT4]
 065  2014B                       CALL 14B[prep_ram]                          ; reset initials, latch addr
 066  20163                       CALL 163[output_del_all_com]
 067  01700                       LOAD s7[mem_full_REG], 00                   ; reset mem_full register
 068  01800                       LOAD s8[rec_num_REG], 00                    ; reset number of recordings
 069  01000                       LOAD s0, 00
 06A  200A9                       CALL 0A9[clear_scratchpad]
 06B  01400                       LOAD s4[scratch_start_REG], 00              ; reset scratch pad pointers
 06C  01504                       LOAD s5[scratch_stop_REG], 04
 06D  01000                       LOAD s0, 00                                 ; LOAD first RAM addr in free addr pointer
 06E  2F03D                       STORE s0, 3D                                ; other addr are ALWAYS written to before they're read
 06F  2F03E                       STORE s0, 3E
 070  2F03F                       STORE s0, 3F
 071  2F040                       STORE s0, 40
 072  22073                       JUMP 073[deleting]
 073  28001             deleting: ENABLE INTERRUPT
 074  20280                       CALL 280[print_deleting]
 075  1DA07                       COMPARE sA[int_c_REG], 07                   ; wait for op done int
 076  3016C                       CALL Z, 16C[res_latch_ram]
 077  32147                       JUMP Z, 147[ram_op_done]                    ; print done
 078  22073                       JUMP 073[deleting]
 079  1D918              inc_vol: COMPARE s9[volume_REG], 18                  ; if max volume, no action
 07A  32005                       JUMP Z, 005[wait_for_int]
 07B  11902                       ADD s9[volume_REG], 02                      ; increment vol
 07C  200AF                       CALL 0AF[output_vol]                        ; output vol
 07D  221AE                       JUMP 1AE[print_volume]                      ; print vol
 07E  1D900              dec_vol: COMPARE s9[volume_REG], 00                  ; if min volume, no action
 07F  32005                       JUMP Z, 005[wait_for_int]
 080  19902                       SUB s9[volume_REG], 02                      ; decrement vol
 081  200AF                       CALL 0AF[output_vol]                        ; output vol
 082  221AE                       JUMP 1AE[print_volume]                      ; print vol
 083  28000             ret_menu: DISABLE INTERRUPT
 084  1DF06                       COMPARE sF[state_REG], 06
 085  32089                       JUMP Z, 089[load_play_state]
 086  1DF05                       COMPARE sF[state_REG], 05
 087  3208C                       JUMP Z, 08C[load_del_state]
 088  22015                       JUMP 015[menu]
 089  28000      load_play_state: DISABLE INTERRUPT
 08A  01F04                       LOAD sF[state_REG], 04
 08B  22015                       JUMP 015[menu]
 08C  28000       load_del_state: DISABLE INTERRUPT
 08D  01F02                       LOAD sF[state_REG], 02
 08E  22015                       JUMP 015[menu]
 08F  28000  inc_scratch_pointer: DISABLE INTERRUPT
 090  1D800                       COMPARE s8[rec_num_REG], 00                 ; don't increment if only 1 recording
 091  31000                       RETURN Z
 092  00080                       LOAD s0, s8[rec_num_REG]                    ; load regs to calculate max pointer
 093  01100                       LOAD s1, 00
 094  200A2                       CALL 0A2[calc_max_pointer]
 095  1C410                       COMPARE s4[scratch_start_REG], s1           ; must be less than MAX addr
 096  31000                       RETURN Z
 097  11408                       ADD s4[scratch_start_REG], 08
 098  11508                       ADD s5[scratch_stop_REG], 08
 099  2D4FF                       OUTPUT s4[scratch_start_REG], FF[test_PORT] ; display REG loc on LEDs
 09A  25000                       RETURN                                      ; update menu
 09B  28000  dec_scratch_pointer: DISABLE INTERRUPT
 09C  1D400                       COMPARE s4[scratch_start_REG], 00           ; must be greater than MIN addr, 0
 09D  31000                       RETURN Z
 09E  19408                       SUB s4[scratch_start_REG], 08
 09F  19508                       SUB s5[scratch_stop_REG], 08
 0A0  2D4FF                       OUTPUT s4[scratch_start_REG], FF[test_PORT] ; display REG loc on LEDs
 0A1  25000                       RETURN                                      ; update menu
 0A2  28000     calc_max_pointer: DISABLE INTERRUPT
 0A3  19001                       SUB s0, 01
 0A4  11108                       ADD s1, 08
 0A5  1D000                       COMPARE s0, 00
 0A6  360A2                       JUMP NZ, 0A2[calc_max_pointer]
 0A7  19108                       SUB s1, 08
 0A8  25000                       RETURN 
 0A9  28000     clear_scratchpad: DISABLE INTERRUPT
 0AA  1D040                       COMPARE s0, 40
 0AB  31000                       RETURN Z
 0AC  2F000                       STORE s0, 00
 0AD  11001                       ADD s0, 01
 0AE  220A9                       JUMP 0A9[clear_scratchpad]
 0AF  28000           output_vol: DISABLE INTERRUPT
 0B0  2D905                       OUTPUT s9[volume_REG], 05[volume_PORT]
 0B1  25000                       RETURN 
 0B2  28000                 play: DISABLE INTERRUPT
 0B3  1D601                       COMPARE s6[paused_REG], 01                  ; check if paused
 0B4  320D8                       JUMP Z, 0D8[unpause]
 0B5  1DB01                       COMPARE sB[ram_c_REG], 01                   ; already playing
 0B6  320F1                       JUMP Z, 0F1[pause]
 0B7  1DB10                       COMPARE sB[ram_c_REG], 10                   ; or fast forwarding
 0B8  320F1                       JUMP Z, 0F1[pause]
 0B9  1D801                       COMPARE s8[rec_num_REG], 01                 ; only play if recording exists
 0BA  3A015                       JUMP C, 015[menu]
 0BB  1DB80                       COMPARE sB[ram_c_REG], 80                   ; otherwise continue only if ram INACTIVE
 0BC  36005                       JUMP NZ, 005[wait_for_int]
 0BD  0A040                       FETCH s0, (s4[scratch_start_REG])
 0BE  2D001                       OUTPUT s0, 01[ram_start_addr_PORT1]         ; playback starts at 00
 0BF  11401                       ADD s4[scratch_start_REG], 01
 0C0  0A040                       FETCH s0, (s4[scratch_start_REG])
 0C1  2D006                       OUTPUT s0, 06[ram_start_addr_PORT2]
 0C2  11401                       ADD s4[scratch_start_REG], 01
 0C3  0A040                       FETCH s0, (s4[scratch_start_REG])
 0C4  2D007                       OUTPUT s0, 07[ram_start_addr_PORT3]
 0C5  11401                       ADD s4[scratch_start_REG], 01
 0C6  0A040                       FETCH s0, (s4[scratch_start_REG])
 0C7  2D008                       OUTPUT s0, 08[ram_start_addr_PORT4]
 0C8  19403                       SUB s4[scratch_start_REG], 03
 0C9  0A050                       FETCH s0, (s5[scratch_stop_REG])            ; set stop addr
 0CA  2D002                       OUTPUT s0, 02[ram_stop_addr_PORT1]
 0CB  11501                       ADD s5[scratch_stop_REG], 01
 0CC  0A050                       FETCH s0, (s5[scratch_stop_REG])
 0CD  2D009                       OUTPUT s0, 09[ram_stop_addr_PORT2]
 0CE  11501                       ADD s5[scratch_stop_REG], 01
 0CF  0A050                       FETCH s0, (s5[scratch_stop_REG])
 0D0  2D00A                       OUTPUT s0, 0A[ram_stop_addr_PORT3]
 0D1  11501                       ADD s5[scratch_stop_REG], 01
 0D2  0A050                       FETCH s0, (s5[scratch_stop_REG])
 0D3  2D00B                       OUTPUT s0, 0B[ram_stop_addr_PORT4]
 0D4  19503                       SUB s5[scratch_stop_REG], 03
 0D5  2014B                       CALL 14B[prep_ram]                          ; reset initials, latch addr
 0D6  2015A                       CALL 15A[output_play_com]
 0D7  22015                       JUMP 015[menu]                              ; update menu
 0D8  28000              unpause: DISABLE INTERRUPT
 0D9  0B039                       FETCH s0, 39                                ; FIXED pause addr location
 0DA  2D001                       OUTPUT s0, 01[ram_start_addr_PORT1]
 0DB  0B03A                       FETCH s0, 3A
 0DC  2D006                       OUTPUT s0, 06[ram_start_addr_PORT2]
 0DD  0B03B                       FETCH s0, 3B
 0DE  2D007                       OUTPUT s0, 07[ram_start_addr_PORT3]
 0DF  0B03C                       FETCH s0, 3C
 0E0  2D008                       OUTPUT s0, 08[ram_start_addr_PORT4]
 0E1  0A050                       FETCH s0, (s5[scratch_stop_REG])            ; set stop addr
 0E2  2D002                       OUTPUT s0, 02[ram_stop_addr_PORT1]
 0E3  11501                       ADD s5[scratch_stop_REG], 01
 0E4  0A050                       FETCH s0, (s5[scratch_stop_REG])
 0E5  2D009                       OUTPUT s0, 09[ram_stop_addr_PORT2]
 0E6  11501                       ADD s5[scratch_stop_REG], 01
 0E7  0A050                       FETCH s0, (s5[scratch_stop_REG])
 0E8  2D00A                       OUTPUT s0, 0A[ram_stop_addr_PORT3]
 0E9  11501                       ADD s5[scratch_stop_REG], 01
 0EA  0A050                       FETCH s0, (s5[scratch_stop_REG])
 0EB  2D00B                       OUTPUT s0, 0B[ram_stop_addr_PORT4]
 0EC  19503                       SUB s5[scratch_stop_REG], 03
 0ED  2014B                       CALL 14B[prep_ram]                          ; reset initials, latch addr
 0EE  2015A                       CALL 15A[output_play_com]
 0EF  01600                       LOAD s6[paused_REG], 00
 0F0  22015                       JUMP 015[menu]
 0F1  28000                pause: DISABLE INTERRUPT
 0F2  20169                       CALL 169[latch_pause_addr]
 0F3  2016F                       CALL 16F[set_ram_inactive]
 0F4  0900C                       INPUT s0, 0C[write_stop_addr_PORT1]         ; store paused addr at FIXED loc
 0F5  2F039                       STORE s0, 39
 0F6  0900D                       INPUT s0, 0D[write_stop_addr_PORT2]
 0F7  2F03A                       STORE s0, 3A
 0F8  0900E                       INPUT s0, 0E[write_stop_addr_PORT3]
 0F9  2F03B                       STORE s0, 3B
 0FA  0900F                       INPUT s0, 0F[write_stop_addr_PORT4]
 0FB  2F03C                       STORE s0, 3C
 0FC  01601                       LOAD s6[paused_REG], 01                     ; set paused flag
 0FD  22015                       JUMP 015[menu]
 0FE  28000               record: DISABLE INTERRUPT
 0FF  1DB02                       COMPARE sB[ram_c_REG], 02                   ; if already in WRITE state, jump to stop
 100  32122                       JUMP Z, 122[stop_rec]
 101  1D701                       COMPARE s7[mem_full_REG], 01                ; if memory full, redirect
 102  3218F                       JUMP Z, 18F[print_mem_full]
 103  1D805                       COMPARE s8[rec_num_REG], 05                 ; if already 5 recordings
 104  3218F                       JUMP Z, 18F[print_mem_full]
 105  1DB80                       COMPARE sB[ram_c_REG], 80                   ; otherwise, ram must be INACTIVE
 106  36005                       JUMP NZ, 005[wait_for_int]
 107  11801                       ADD s8[rec_num_REG], 01                     ; inc recording count
 108  1D801                       COMPARE s8[rec_num_REG], 01
 109  00080                       LOAD s0, s8[rec_num_REG]
 10A  01100                       LOAD s1, 00
 10B  340A2                       CALL NZ, 0A2[calc_max_pointer]
 10C  00410                       LOAD s4[scratch_start_REG], s1
 10D  11104                       ADD s1, 04
 10E  00510                       LOAD s5[scratch_stop_REG], s1
 10F  0B03D                       FETCH s0, 3D                                ; load address of next free mem location as START loc
 110  2E040                       STORE s0, (s4[scratch_start_REG])
 111  2D001                       OUTPUT s0, 01[ram_start_addr_PORT1]
 112  11401                       ADD s4[scratch_start_REG], 01
 113  0B03E                       FETCH s0, 3E
 114  2E040                       STORE s0, (s4[scratch_start_REG])
 115  2D006                       OUTPUT s0, 06[ram_start_addr_PORT2]
 116  11401                       ADD s4[scratch_start_REG], 01
 117  0B03F                       FETCH s0, 3F
 118  2E040                       STORE s0, (s4[scratch_start_REG])
 119  2D007                       OUTPUT s0, 07[ram_start_addr_PORT3]
 11A  11401                       ADD s4[scratch_start_REG], 01
 11B  0B040                       FETCH s0, 40
 11C  2E040                       STORE s0, (s4[scratch_start_REG])
 11D  2D008                       OUTPUT s0, 08[ram_start_addr_PORT4]
 11E  19403                       SUB s4[scratch_start_REG], 03
 11F  2014B                       CALL 14B[prep_ram]                          ; reset initials, latch addr
 120                              ; record scratch pad pointer in FIXED mem loc in scratch pad
 120                              ; allows for movement through menu
 120  2015D                       CALL 15D[output_rec_com]
 121  22015                       JUMP 015[menu]                              ; update menu
 122  28000             stop_rec: DISABLE INTERRUPT
 123  20169                       CALL 169[latch_pause_addr]
 124  2016F                       CALL 16F[set_ram_inactive]
 125  1D801                       COMPARE s8[rec_num_REG], 01
 126  00080                       LOAD s0, s8[rec_num_REG]
 127  01100                       LOAD s1, 00
 128  340A2                       CALL NZ, 0A2[calc_max_pointer]
 129  00410                       LOAD s4[scratch_start_REG], s1
 12A  11104                       ADD s1, 04
 12B  00510                       LOAD s5[scratch_stop_REG], s1
 12C  0900C                       INPUT s0, 0C[write_stop_addr_PORT1]         ; store stop loc
 12D  2E050                       STORE s0, (s5[scratch_stop_REG])
 12E  11001                       ADD s0, 01                                  ; inc addr
 12F  2F03D                       STORE s0, 3D                                ; store in next free location FIXED addr
 130  11501                       ADD s5[scratch_stop_REG], 01
 131  0900D                       INPUT s0, 0D[write_stop_addr_PORT2]
 132  2E050                       STORE s0, (s5[scratch_stop_REG])
 133  11001                       ADD s0, 01
 134  2F03E                       STORE s0, 3E
 135  11501                       ADD s5[scratch_stop_REG], 01
 136  0900E                       INPUT s0, 0E[write_stop_addr_PORT3]
 137  2E050                       STORE s0, (s5[scratch_stop_REG])
 138  11001                       ADD s0, 01
 139  2F03F                       STORE s0, 3F
 13A  11501                       ADD s5[scratch_stop_REG], 01
 13B  0900F                       INPUT s0, 0F[write_stop_addr_PORT4]
 13C  2E050                       STORE s0, (s5[scratch_stop_REG])
 13D  11001                       ADD s0, 01
 13E  2F040                       STORE s0, 40
 13F  19503                       SUB s5[scratch_stop_REG], 03
 140  1D701                       COMPARE s7[mem_full_REG], 01                ; if memory full, redirect
 141  3218F                       JUMP Z, 18F[print_mem_full]
 142  22015                       JUMP 015[menu]                              ; update menu
 143  28000             mem_full: DISABLE INTERRUPT
 144  01A00                       LOAD sA[int_c_REG], 00                      ; unload interrupt
 145  01701                       LOAD s7[mem_full_REG], 01
 146  22122                       JUMP 122[stop_rec]
 147  28000          ram_op_done: DISABLE INTERRUPT
 148  2016F                       CALL 16F[set_ram_inactive]
 149  01A00                       LOAD sA[int_c_REG], 00                      ; unload interrupt
 14A  22015                       JUMP 015[menu]
 14B  28000             prep_ram: DISABLE INTERRUPT                           ; load addr to ram, reset initials
 14C  2016C                       CALL 16C[res_latch_ram]
 14D  202F0                       CALL 2F0[delay_10us]
 14E  2016F                       CALL 16F[set_ram_inactive]
 14F  25000                       RETURN 
 150  28000            inc_state: DISABLE INTERRUPT
 151  1DF05                       COMPARE sF[state_REG], 05
 152  32015                       JUMP Z, 015[menu]
 153  1DF06                       COMPARE sF[state_REG], 06
 154  32015                       JUMP Z, 015[menu]
 155  11F01                       ADD sF[state_REG], 01
 156  22015                       JUMP 015[menu]
 157  28000            dec_state: DISABLE INTERRUPT
 158  19F01                       SUB sF[state_REG], 01
 159  22015                       JUMP 015[menu]
 15A  01B01      output_play_com: LOAD sB[ram_c_REG], 01                      ; send play command
 15B  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 15C  25000                       RETURN 
 15D  01B02       output_rec_com: LOAD sB[ram_c_REG], 02                      ; send record command
 15E  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 15F  25000                       RETURN 
 160  01B04       output_del_com: LOAD sB[ram_c_REG], 04                      ; send addr-controlled delete command
 161  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 162  25000                       RETURN 
 163  01B08   output_del_all_com: LOAD sB[ram_c_REG], 08                      ; send delete all command
 164  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 165  25000                       RETURN 
 166  01B10        output_ff_com: LOAD sB[ram_c_REG], 10                      ; send FF command
 167  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 168  25000                       RETURN 
 169  01B20     latch_pause_addr: LOAD sB[ram_c_REG], 20                      ; latch write stop addr
 16A  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 16B  25000                       RETURN 
 16C  01B40        res_latch_ram: LOAD sB[ram_c_REG], 40                      ; latch addr, reset initials
 16D  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 16E  25000                       RETURN 
 16F  01B80     set_ram_inactive: LOAD sB[ram_c_REG], 80                      ; inactive
 170  2DB00                       OUTPUT sB[ram_c_REG], 00[ram_com_PORT]
 171  25000                       RETURN 
 172  28000          reset_flags: DISABLE INTERRUPT
 173  01001                       LOAD s0, 01
 174  1D000                       COMPARE s0, 00
 175  25000                       RETURN 
 176  28000            print_del: DISABLE INTERRUPT
 177  202B3                       CALL 2B3[clear_display]
 178  01E20                       LOAD sE[char_REG], 20                       ;spaces
 179  202AA                       CALL 2AA[write_char]
 17A  01E20                       LOAD sE[char_REG], 20
 17B  202AA                       CALL 2AA[write_char]
 17C  01E20                       LOAD sE[char_REG], 20
 17D  202AA                       CALL 2AA[write_char]
 17E  01E20                       LOAD sE[char_REG], 20
 17F  202AA                       CALL 2AA[write_char]
 180  01E20                       LOAD sE[char_REG], 20
 181  202AA                       CALL 2AA[write_char]
 182  01E44                       LOAD sE[char_REG], 44                       ; print "DELETE"
 183  202AA                       CALL 2AA[write_char]
 184  01E45                       LOAD sE[char_REG], 45
 185  202AA                       CALL 2AA[write_char]
 186  01E4C                       LOAD sE[char_REG], 4C
 187  202AA                       CALL 2AA[write_char]
 188  01E45                       LOAD sE[char_REG], 45
 189  202AA                       CALL 2AA[write_char]
 18A  01E54                       LOAD sE[char_REG], 54
 18B  202AA                       CALL 2AA[write_char]
 18C  01E45                       LOAD sE[char_REG], 45
 18D  202AA                       CALL 2AA[write_char]
 18E  22005                       JUMP 005[wait_for_int]
 18F  28000       print_mem_full: DISABLE INTERRUPT
 190  202B3                       CALL 2B3[clear_display]
 191  01E20                       LOAD sE[char_REG], 20                       ; spaces
 192  202AA                       CALL 2AA[write_char]
 193  01E20                       LOAD sE[char_REG], 20
 194  202AA                       CALL 2AA[write_char]
 195  01E4D                       LOAD sE[char_REG], 4D
 196  202AA                       CALL 2AA[write_char]
 197  01E45                       LOAD sE[char_REG], 45
 198  202AA                       CALL 2AA[write_char]
 199  01E4D                       LOAD sE[char_REG], 4D
 19A  202AA                       CALL 2AA[write_char]
 19B  01E4F                       LOAD sE[char_REG], 4F
 19C  202AA                       CALL 2AA[write_char]
 19D  01E52                       LOAD sE[char_REG], 52
 19E  202AA                       CALL 2AA[write_char]
 19F  01E59                       LOAD sE[char_REG], 59
 1A0  202AA                       CALL 2AA[write_char]
 1A1  01E20                       LOAD sE[char_REG], 20
 1A2  202AA                       CALL 2AA[write_char]
 1A3  01E46                       LOAD sE[char_REG], 46
 1A4  202AA                       CALL 2AA[write_char]
 1A5  01E55                       LOAD sE[char_REG], 55
 1A6  202AA                       CALL 2AA[write_char]
 1A7  01E4C                       LOAD sE[char_REG], 4C
 1A8  202AA                       CALL 2AA[write_char]
 1A9  01E4C                       LOAD sE[char_REG], 4C
 1AA  202AA                       CALL 2AA[write_char]
 1AB  01E21                       LOAD sE[char_REG], 21
 1AC  202AA                       CALL 2AA[write_char]
 1AD  22005                       JUMP 005[wait_for_int]
 1AE  28000         print_volume: DISABLE INTERRUPT
 1AF  202B3                       CALL 2B3[clear_display]                     ; clear display
 1B0  01E56                       LOAD sE[char_REG], 56                       ; print "VOL: "
 1B1  202AA                       CALL 2AA[write_char]
 1B2  01E4F                       LOAD sE[char_REG], 4F
 1B3  202AA                       CALL 2AA[write_char]
 1B4  01E4C                       LOAD sE[char_REG], 4C
 1B5  202AA                       CALL 2AA[write_char]
 1B6  01E3A                       LOAD sE[char_REG], 3A
 1B7  202AA                       CALL 2AA[write_char]
 1B8  01E20                       LOAD sE[char_REG], 20
 1B9  202AA                       CALL 2AA[write_char]
 1BA  00090                       LOAD s0, s9[volume_REG]
 1BB  221BC                       JUMP 1BC[print_v_meter]                     ; print volume bars
 1BC  28000        print_v_meter: DISABLE INTERRUPT
 1BD  1D000                       COMPARE s0, 00                              ; if s0 == 0, done
 1BE  32005                       JUMP Z, 005[wait_for_int]
 1BF  01EFF                       LOAD sE[char_REG], FF                       ; print box
 1C0  202AA                       CALL 2AA[write_char]
 1C1  19002                       SUB s0, 02                                  ; decrease s0
 1C2  221BC                       JUMP 1BC[print_v_meter]                     ; repeat
 1C3  28000        print_del_all: DISABLE INTERRUPT
 1C4  202B3                       CALL 2B3[clear_display]
 1C5  01E20                       LOAD sE[char_REG], 20                       ; spaces
 1C6  202AA                       CALL 2AA[write_char]
 1C7  01E20                       LOAD sE[char_REG], 20
 1C8  202AA                       CALL 2AA[write_char]
 1C9  01E20                       LOAD sE[char_REG], 20
 1CA  202AA                       CALL 2AA[write_char]
 1CB  01E44                       LOAD sE[char_REG], 44
 1CC  202AA                       CALL 2AA[write_char]
 1CD  01E45                       LOAD sE[char_REG], 45
 1CE  202AA                       CALL 2AA[write_char]
 1CF  01E4C                       LOAD sE[char_REG], 4C
 1D0  202AA                       CALL 2AA[write_char]
 1D1  01E45                       LOAD sE[char_REG], 45
 1D2  202AA                       CALL 2AA[write_char]
 1D3  01E54                       LOAD sE[char_REG], 54
 1D4  202AA                       CALL 2AA[write_char]
 1D5  01E45                       LOAD sE[char_REG], 45
 1D6  202AA                       CALL 2AA[write_char]
 1D7  01E20                       LOAD sE[char_REG], 20
 1D8  202AA                       CALL 2AA[write_char]
 1D9  01E41                       LOAD sE[char_REG], 41
 1DA  202AA                       CALL 2AA[write_char]
 1DB  01E4C                       LOAD sE[char_REG], 4C
 1DC  202AA                       CALL 2AA[write_char]
 1DD  01E4C                       LOAD sE[char_REG], 4C
 1DE  202AA                       CALL 2AA[write_char]
 1DF  22005                       JUMP 005[wait_for_int]
 1E0  28000          print_empty: DISABLE INTERRUPT
 1E1  202B3                       CALL 2B3[clear_display]
 1E2  01E20                       LOAD sE[char_REG], 20                       ; spaces
 1E3  202AA                       CALL 2AA[write_char]
 1E4  01E20                       LOAD sE[char_REG], 20
 1E5  202AA                       CALL 2AA[write_char]
 1E6  01E20                       LOAD sE[char_REG], 20
 1E7  202AA                       CALL 2AA[write_char]
 1E8  01E20                       LOAD sE[char_REG], 20
 1E9  202AA                       CALL 2AA[write_char]
 1EA  01E20                       LOAD sE[char_REG], 20
 1EB  202AA                       CALL 2AA[write_char]
 1EC  01E45                       LOAD sE[char_REG], 45                       ; print "EMPTY"
 1ED  202AA                       CALL 2AA[write_char]
 1EE  01E4D                       LOAD sE[char_REG], 4D
 1EF  202AA                       CALL 2AA[write_char]
 1F0  01E50                       LOAD sE[char_REG], 50
 1F1  202AA                       CALL 2AA[write_char]
 1F2  01E54                       LOAD sE[char_REG], 54
 1F3  202AA                       CALL 2AA[write_char]
 1F4  01E59                       LOAD sE[char_REG], 59
 1F5  202AA                       CALL 2AA[write_char]
 1F6  01E21                       LOAD sE[char_REG], 21
 1F7  202AA                       CALL 2AA[write_char]
 1F8  22005                       JUMP 005[wait_for_int]
 1F9  28000       print_messages: DISABLE INTERRUPT
 1FA  1D800                       COMPARE s8[rec_num_REG], 00
 1FB  321E0                       JUMP Z, 1E0[print_empty]
 1FC  202B3                       CALL 2B3[clear_display]                     ; clear display
 1FD  01E20                       LOAD sE[char_REG], 20                       ; spaces
 1FE  202AA                       CALL 2AA[write_char]
 1FF  01E20                       LOAD sE[char_REG], 20
 200  202AA                       CALL 2AA[write_char]
 201  01E4D                       LOAD sE[char_REG], 4D
 202  202AA                       CALL 2AA[write_char]
 203  01E45                       LOAD sE[char_REG], 45
 204  202AA                       CALL 2AA[write_char]
 205  01E53                       LOAD sE[char_REG], 53
 206  202AA                       CALL 2AA[write_char]
 207  01E53                       LOAD sE[char_REG], 53
 208  202AA                       CALL 2AA[write_char]
 209  01E41                       LOAD sE[char_REG], 41
 20A  202AA                       CALL 2AA[write_char]
 20B  01E47                       LOAD sE[char_REG], 47
 20C  202AA                       CALL 2AA[write_char]
 20D  01E45                       LOAD sE[char_REG], 45
 20E  202AA                       CALL 2AA[write_char]
 20F  01E20                       LOAD sE[char_REG], 20
 210  202AA                       CALL 2AA[write_char]
 211  1D400                       COMPARE s4[scratch_start_REG], 00
 212  3221E                       JUMP Z, 21E[print_one]
 213  1D408                       COMPARE s4[scratch_start_REG], 08
 214  32224                       JUMP Z, 224[print_two]
 215  1D410                       COMPARE s4[scratch_start_REG], 10
 216  3222A                       JUMP Z, 22A[print_three]
 217  1D418                       COMPARE s4[scratch_start_REG], 18
 218  32230                       JUMP Z, 230[print_four]
 219  1D420                       COMPARE s4[scratch_start_REG], 20
 21A  32236                       JUMP Z, 236[print_five]
 21B  01EF4                       LOAD sE[char_REG], F4                       ; if omega prints, something went wrong
 21C  202AA                       CALL 2AA[write_char]
 21D  22005                       JUMP 005[wait_for_int]
 21E  28000            print_one: DISABLE INTERRUPT
 21F  01E31                       LOAD sE[char_REG], 31
 220  202AA                       CALL 2AA[write_char]
 221  01E20                       LOAD sE[char_REG], 20
 222  202AA                       CALL 2AA[write_char]
 223  2226C                       JUMP 26C[print_indic]
 224  28000            print_two: DISABLE INTERRUPT
 225  01E32                       LOAD sE[char_REG], 32
 226  202AA                       CALL 2AA[write_char]
 227  01E20                       LOAD sE[char_REG], 20
 228  202AA                       CALL 2AA[write_char]
 229  2226C                       JUMP 26C[print_indic]
 22A  28000          print_three: DISABLE INTERRUPT
 22B  01E33                       LOAD sE[char_REG], 33
 22C  202AA                       CALL 2AA[write_char]
 22D  01E20                       LOAD sE[char_REG], 20
 22E  202AA                       CALL 2AA[write_char]
 22F  2226C                       JUMP 26C[print_indic]
 230  28000           print_four: DISABLE INTERRUPT
 231  01E34                       LOAD sE[char_REG], 34
 232  202AA                       CALL 2AA[write_char]
 233  01E20                       LOAD sE[char_REG], 20
 234  202AA                       CALL 2AA[write_char]
 235  2226C                       JUMP 26C[print_indic]
 236  28000           print_five: DISABLE INTERRUPT
 237  01E35                       LOAD sE[char_REG], 35
 238  202AA                       CALL 2AA[write_char]
 239  01E20                       LOAD sE[char_REG], 20
 23A  202AA                       CALL 2AA[write_char]
 23B  2226C                       JUMP 26C[print_indic]
 23C  28000           print_play: DISABLE INTERRUPT
 23D  202B3                       CALL 2B3[clear_display]                     ; clear display
 23E  01E20                       LOAD sE[char_REG], 20                       ; spaces
 23F  202AA                       CALL 2AA[write_char]
 240  01E20                       LOAD sE[char_REG], 20
 241  202AA                       CALL 2AA[write_char]
 242  01E20                       LOAD sE[char_REG], 20
 243  202AA                       CALL 2AA[write_char]
 244  01E20                       LOAD sE[char_REG], 20
 245  202AA                       CALL 2AA[write_char]
 246  01E20                       LOAD sE[char_REG], 20
 247  202AA                       CALL 2AA[write_char]
 248  01E20                       LOAD sE[char_REG], 20
 249  202AA                       CALL 2AA[write_char]
 24A  01E50                       LOAD sE[char_REG], 50                       ; print "PLAY"
 24B  202AA                       CALL 2AA[write_char]
 24C  01E4C                       LOAD sE[char_REG], 4C
 24D  202AA                       CALL 2AA[write_char]
 24E  01E41                       LOAD sE[char_REG], 41
 24F  202AA                       CALL 2AA[write_char]
 250  01E59                       LOAD sE[char_REG], 59
 251  202AA                       CALL 2AA[write_char]
 252  22005                       JUMP 005[wait_for_int]
 253  28000         print_record: DISABLE INTERRUPT
 254  202B3                       CALL 2B3[clear_display]                     ; clear display
 255  01E20                       LOAD sE[char_REG], 20                       ; spaces
 256  202AA                       CALL 2AA[write_char]
 257  01E20                       LOAD sE[char_REG], 20
 258  202AA                       CALL 2AA[write_char]
 259  01E20                       LOAD sE[char_REG], 20
 25A  202AA                       CALL 2AA[write_char]
 25B  01E20                       LOAD sE[char_REG], 20
 25C  202AA                       CALL 2AA[write_char]
 25D  01E52                       LOAD sE[char_REG], 52                       ; print "RECORD"
 25E  202AA                       CALL 2AA[write_char]
 25F  01E45                       LOAD sE[char_REG], 45
 260  202AA                       CALL 2AA[write_char]
 261  01E43                       LOAD sE[char_REG], 43
 262  202AA                       CALL 2AA[write_char]
 263  01E4F                       LOAD sE[char_REG], 4F
 264  202AA                       CALL 2AA[write_char]
 265  01E52                       LOAD sE[char_REG], 52
 266  202AA                       CALL 2AA[write_char]
 267  01E44                       LOAD sE[char_REG], 44
 268  202AA                       CALL 2AA[write_char]
 269  1DB02                       COMPARE sB[ram_c_REG], 02                   ; check if ram recording
 26A  32271                       JUMP Z, 271[print_box]
 26B  22276                       JUMP 276[print_blank]
 26C  1DB01          print_indic: COMPARE sB[ram_c_REG], 01                   ; check if ram recording
 26D  32271                       JUMP Z, 271[print_box]
 26E  1DB10                       COMPARE sB[ram_c_REG], 10                   ; if ffing
 26F  3227B                       JUMP Z, 27B[print_arrow]
 270  22276                       JUMP 276[print_blank]
 271  01E20            print_box: LOAD sE[char_REG], 20                       ; print a space and box
 272  202AA                       CALL 2AA[write_char]
 273  01EFF                       LOAD sE[char_REG], FF
 274  202AA                       CALL 2AA[write_char]
 275  22005                       JUMP 005[wait_for_int]
 276  01E20          print_blank: LOAD sE[char_REG], 20                       ; print a space and empty
 277  202AA                       CALL 2AA[write_char]
 278  01EDB                       LOAD sE[char_REG], DB
 279  202AA                       CALL 2AA[write_char]
 27A  22005                       JUMP 005[wait_for_int]
 27B  01E20          print_arrow: LOAD sE[char_REG], 20                       ; print a space and arrow
 27C  202AA                       CALL 2AA[write_char]
 27D  01E7E                       LOAD sE[char_REG], 7E
 27E  202AA                       CALL 2AA[write_char]
 27F  22005                       JUMP 005[wait_for_int]
 280  202B3       print_deleting: CALL 2B3[clear_display]                     ; print "DELETE"
 281  01E20                       LOAD sE[char_REG], 20                       ; spaces
 282  202AA                       CALL 2AA[write_char]
 283  01E20                       LOAD sE[char_REG], 20
 284  202AA                       CALL 2AA[write_char]
 285  01E44                       LOAD sE[char_REG], 44                       ; print "DELETING"
 286  202AA                       CALL 2AA[write_char]
 287  01E45                       LOAD sE[char_REG], 45
 288  202AA                       CALL 2AA[write_char]
 289  01E4C                       LOAD sE[char_REG], 4C
 28A  202AA                       CALL 2AA[write_char]
 28B  01E45                       LOAD sE[char_REG], 45
 28C  202AA                       CALL 2AA[write_char]
 28D  01E54                       LOAD sE[char_REG], 54
 28E  202AA                       CALL 2AA[write_char]
 28F  01E49                       LOAD sE[char_REG], 49
 290  202AA                       CALL 2AA[write_char]
 291  01E4E                       LOAD sE[char_REG], 4E
 292  202AA                       CALL 2AA[write_char]
 293  01E47                       LOAD sE[char_REG], 47
 294  202AA                       CALL 2AA[write_char]
 295  20329                       CALL 329[delay_10ms]                        ; delay 10ms between periods for flare
 296  20329                       CALL 329[delay_10ms]
 297  20329                       CALL 329[delay_10ms]
 298  01E2E                       LOAD sE[char_REG], 2E
 299  202AA                       CALL 2AA[write_char]
 29A  20329                       CALL 329[delay_10ms]
 29B  20329                       CALL 329[delay_10ms]
 29C  20329                       CALL 329[delay_10ms]
 29D  01E2E                       LOAD sE[char_REG], 2E
 29E  202AA                       CALL 2AA[write_char]
 29F  20329                       CALL 329[delay_10ms]
 2A0  20329                       CALL 329[delay_10ms]
 2A1  20329                       CALL 329[delay_10ms]
 2A2  01E2E                       LOAD sE[char_REG], 2E
 2A3  202AA                       CALL 2AA[write_char]
 2A4  20329                       CALL 329[delay_10ms]
 2A5  20329                       CALL 329[delay_10ms]
 2A6  20329                       CALL 329[delay_10ms]
 2A7  01E2E                       LOAD sE[char_REG], 2E
 2A8  202AA                       CALL 2AA[write_char]
 2A9  25000                       RETURN 
 2AA  28000           write_char: DISABLE INTERRUPT
 2AB  01C05                       LOAD sC[lcd_c_REG], 05
 2AC  2DE04                       OUTPUT sE[char_REG], 04[lcd_data_PORT]
 2AD  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]
 2AE  202ED                       CALL 2ED[delay_2us]
 2AF  01C00                       LOAD sC[lcd_c_REG], 00
 2B0  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]
 2B1  202D2                       CALL 2D2[delay_char]
 2B2  25000                       RETURN 
 2B3  28000        clear_display: DISABLE INTERRUPT                           ;
 2B4  01D01                       LOAD sD[lcd_d_REG], 01                      ;
 2B5  01C04                       LOAD sC[lcd_c_REG], 04                      ;
 2B6  2DD04                       OUTPUT sD[lcd_d_REG], 04[lcd_data_PORT]     ; output char FIRST
 2B7  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]      ; command controls lcd control logic
 2B8  01C00                       LOAD sC[lcd_c_REG], 00                      ;
 2B9  202ED                       CALL 2ED[delay_2us]                         ; give controller time to deconstruct to 4-bit
 2BA  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]      ;
 2BB  202D6                       CALL 2D6[delay_clear]                       ;
 2BC  202BE                       CALL 2BE[res_ram_loc_top]                   ;
 2BD  25000                       RETURN                                      ;
 2BE  28000      res_ram_loc_top: DISABLE INTERRUPT
 2BF  01D80                       LOAD sD[lcd_d_REG], 80
 2C0  01C04                       LOAD sC[lcd_c_REG], 04
 2C1  2DD04                       OUTPUT sD[lcd_d_REG], 04[lcd_data_PORT]
 2C2  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]
 2C3  01C00                       LOAD sC[lcd_c_REG], 00
 2C4  202ED                       CALL 2ED[delay_2us]
 2C5  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]
 2C6  202D6                       CALL 2D6[delay_clear]
 2C7  25000                       RETURN 
 2C8  28000      res_ram_loc_bot: DISABLE INTERRUPT
 2C9  01DC0                       LOAD sD[lcd_d_REG], C0
 2CA  01C04                       LOAD sC[lcd_c_REG], 04
 2CB  2DD04                       OUTPUT sD[lcd_d_REG], 04[lcd_data_PORT]
 2CC  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]
 2CD  01C00                       LOAD sC[lcd_c_REG], 00
 2CE  202ED                       CALL 2ED[delay_2us]
 2CF  2DC03                       OUTPUT sC[lcd_c_REG], 03[lcd_com_PORT]
 2D0  202D6                       CALL 2D6[delay_clear]
 2D1  25000                       RETURN 
 2D2  2030F           delay_char: CALL 30F[delay_1ms]                         ; at least 2.6ms delay after character write
 2D3  2030F                       CALL 30F[delay_1ms]                         ;
 2D4  20300                       CALL 300[delay_p6ms]                        ;
 2D5  25000                       RETURN                                      ;
 2D6  2030F          delay_clear: CALL 30F[delay_1ms]                         ; at least 1.64ms delay after clearing LCD
 2D7  20300                       CALL 300[delay_p6ms]                        ;
 2D8  202FB                       CALL 2FB[delay_40us]
 2D9  25000                       RETURN                                      ;
 2DA  00000            delay_1us: LOAD s0, s0                                 ; no op command (2 cycles)
 2DB  00000                       LOAD s0, s0                                 ; @ 37.5 MHz / cycle
 2DC  00000                       LOAD s0, s0                                 ; = 0.0533334 us
 2DD  00000                       LOAD s0, s0                                 ; x 19
 2DE  00000                       LOAD s0, s0                                 ; = ~1us
 2DF  00000                       LOAD s0, s0                                 ; 1.0133346 us (ACTUAL TIME)
 2E0  00000                       LOAD s0, s0                                 ; 7
 2E1  00000                       LOAD s0, s0                                 ; 8
 2E2  00000                       LOAD s0, s0                                 ; 9
 2E3  00000                       LOAD s0, s0                                 ; 10
 2E4  00000                       LOAD s0, s0                                 ; 11
 2E5  00000                       LOAD s0, s0                                 ; 12
 2E6  00000                       LOAD s0, s0                                 ; 13
 2E7  00000                       LOAD s0, s0                                 ; 14
 2E8  00000                       LOAD s0, s0                                 ; 15
 2E9  00000                       LOAD s0, s0                                 ; 16
 2EA  00000                       LOAD s0, s0                                 ; 17
 2EB  00000                       LOAD s0, s0                                 ; 18
 2EC  25000                       RETURN                                      ; 19 (all instructions 2 cycles)
 2ED  202DA            delay_2us: CALL 2DA[delay_1us]
 2EE  202DA                       CALL 2DA[delay_1us]
 2EF  25000                       RETURN 
 2F0  202DA           delay_10us: CALL 2DA[delay_1us]                         ; ignoring the time for each CALL instruction
 2F1  202DA                       CALL 2DA[delay_1us]                         ; 1.0133346 us
 2F2  202DA                       CALL 2DA[delay_1us]                         ; x 10
 2F3  202DA                       CALL 2DA[delay_1us]                         ; = 10.133346 us
 2F4  202DA                       CALL 2DA[delay_1us]                         ;
 2F5  202DA                       CALL 2DA[delay_1us]                         ; 10 CALL instructions + 1 RET instruction
 2F6  202DA                       CALL 2DA[delay_1us]                         ; (0.0533334 us) * 11
 2F7  202DA                       CALL 2DA[delay_1us]                         ; = 0.5866674 us
 2F8  202DA                       CALL 2DA[delay_1us]                         ; 10.133346 us + 0.5866674 us
 2F9  202DA                       CALL 2DA[delay_1us]                         ; 10.7200134 (ACTUAL TIME)
 2FA  25000                       RETURN                                      ; better over than under time
 2FB  202F0           delay_40us: CALL 2F0[delay_10us]                        ;
 2FC  202F0                       CALL 2F0[delay_10us]                        ; 10.7200134 us * 4
 2FD  202F0                       CALL 2F0[delay_10us]                        ; = 42.8800536 us
 2FE  202F0                       CALL 2F0[delay_10us]                        ; its ok to delay longer
 2FF  25000                       RETURN 
 300  202FB           delay_p6ms: CALL 2FB[delay_40us]                        ; 42.8800536 us
 301  202FB                       CALL 2FB[delay_40us]                        ; * 14
 302  202FB                       CALL 2FB[delay_40us]                        ; = 600.3207 us
 303  202FB                       CALL 2FB[delay_40us]                        ; = 0.600321 ms
 304  202FB                       CALL 2FB[delay_40us]                        ; 5
 305  202FB                       CALL 2FB[delay_40us]                        ;
 306  202FB                       CALL 2FB[delay_40us]                        ;
 307  202FB                       CALL 2FB[delay_40us]                        ;
 308  202FB                       CALL 2FB[delay_40us]                        ;
 309  202FB                       CALL 2FB[delay_40us]                        ; 10
 30A  202FB                       CALL 2FB[delay_40us]                        ;
 30B  202FB                       CALL 2FB[delay_40us]                        ;
 30C  202FB                       CALL 2FB[delay_40us]                        ;
 30D  202FB                       CALL 2FB[delay_40us]                        ; 14
 30E  25000                       RETURN 
 30F  202FB            delay_1ms: CALL 2FB[delay_40us]                        ; 42.8800536 us
 310  202FB                       CALL 2FB[delay_40us]                        ; * 25
 311  202FB                       CALL 2FB[delay_40us]                        ; = 1029.121 us
 312  202FB                       CALL 2FB[delay_40us]                        ; = 1.029121 ms
 313  202FB                       CALL 2FB[delay_40us]                        ; 5
 314  202FB                       CALL 2FB[delay_40us]                        ;
 315  202FB                       CALL 2FB[delay_40us]                        ;
 316  202FB                       CALL 2FB[delay_40us]                        ;
 317  202FB                       CALL 2FB[delay_40us]                        ;
 318  202FB                       CALL 2FB[delay_40us]                        ; 10
 319  202FB                       CALL 2FB[delay_40us]                        ;
 31A  202FB                       CALL 2FB[delay_40us]                        ;
 31B  202FB                       CALL 2FB[delay_40us]                        ;
 31C  202FB                       CALL 2FB[delay_40us]                        ;
 31D  202FB                       CALL 2FB[delay_40us]                        ; 15
 31E  202FB                       CALL 2FB[delay_40us]                        ;
 31F  202FB                       CALL 2FB[delay_40us]                        ;
 320  202FB                       CALL 2FB[delay_40us]                        ;
 321  202FB                       CALL 2FB[delay_40us]                        ;
 322  202FB                       CALL 2FB[delay_40us]                        ; 20
 323  202FB                       CALL 2FB[delay_40us]                        ;
 324  202FB                       CALL 2FB[delay_40us]                        ;
 325  202FB                       CALL 2FB[delay_40us]                        ;
 326  202FB                       CALL 2FB[delay_40us]                        ;
 327  202FB                       CALL 2FB[delay_40us]                        ; 25
 328  25000                       RETURN                                      ; CALL and RET instruction delay negligible
 329  2030F           delay_10ms: CALL 30F[delay_1ms]
 32A  2030F                       CALL 30F[delay_1ms]
 32B  2030F                       CALL 30F[delay_1ms]
 32C  2030F                       CALL 30F[delay_1ms]
 32D  2030F                       CALL 30F[delay_1ms]
 32E  2030F                       CALL 30F[delay_1ms]
 32F  2030F                       CALL 30F[delay_1ms]
 330  2030F                       CALL 30F[delay_1ms]
 331  2030F                       CALL 30F[delay_1ms]
 332  2030F                       CALL 30F[delay_1ms]
 333  25000                       RETURN 
 334  09A00                  ISR: INPUT sA[int_c_REG], 00
 335  29000                       RETURNI DISABLE
 FFF                              ADDRESS FFF                                 ; interrupt vector is located at highest instruction address (4k instructions)
 FFF  22334                       JUMP 334[ISR]
 FFF                              ;================================================================
 FFF                              ;
 FFF                              ;================================================================


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

D:\Documents\School\CSD LAB\FIN\program_assembler\picoblaze\program.psm



List of defined constants

 CONSTANT name         Value        Source PSM File

 timestamp_hours       15'd         
 timestamp_minutes     11'd         
 timestamp_seconds     36'd         
 datestamp_year        15'd         
 datestamp_month       4'd          
 datestamp_day         30'd         
 NUL                   00           
 BEL                   07           
 BS                    08           
 HT                    09           
 LF                    0A           
 VT                    0B           
 CR                    0D           
 ESC                   1B           
 DEL                   7F           
 DCS                   90           
 ST                    9C           
 ram_com_PORT          00           program.psm
 ram_start_addr_PORT1  01           program.psm
 ram_start_addr_PORT2  06           program.psm
 ram_start_addr_PORT3  07           program.psm
 ram_start_addr_PORT4  08           program.psm
 ram_stop_addr_PORT1   02           program.psm
 ram_stop_addr_PORT2   09           program.psm
 ram_stop_addr_PORT3   0A           program.psm
 ram_stop_addr_PORT4   0B           program.psm
 lcd_com_PORT          03           program.psm
 lcd_data_PORT         04           program.psm
 volume_PORT           05           program.psm
 write_stop_addr_PORT1 0C           program.psm
 write_stop_addr_PORT2 0D           program.psm
 write_stop_addr_PORT3 0E           program.psm
 write_stop_addr_PORT4 0F           program.psm
 test_PORT             FF           program.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "30 Apr 2015"  
 timestamp$        "15:11:36"     



List of line labels

   Label                 Addr  Source PSM File

   wait_for_int          005   program.psm
   menu                  015   program.psm
   left_b                025   program.psm
   right_b               02E   program.psm
   center_b              037   program.psm
   play_msgs             044   program.psm
   del_msgs              047   program.psm
   up_b                  04A   program.psm
   down_b                04F   program.psm
   del_all               058   program.psm
   deleting              073   program.psm
   inc_vol               079   program.psm
   dec_vol               07E   program.psm
   ret_menu              083   program.psm
   load_play_state       089   program.psm
   load_del_state        08C   program.psm
   inc_scratch_pointer   08F   program.psm
   dec_scratch_pointer   09B   program.psm
   calc_max_pointer      0A2   program.psm
   clear_scratchpad      0A9   program.psm
   output_vol            0AF   program.psm
   play                  0B2   program.psm
   unpause               0D8   program.psm
   pause                 0F1   program.psm
   record                0FE   program.psm
   stop_rec              122   program.psm
   mem_full              143   program.psm
   ram_op_done           147   program.psm
   prep_ram              14B   program.psm
   inc_state             150   program.psm
   dec_state             157   program.psm
   output_play_com       15A   program.psm
   output_rec_com        15D   program.psm
 * output_del_com        160   program.psm
   output_del_all_com    163   program.psm
 * output_ff_com         166   program.psm
   latch_pause_addr      169   program.psm
   res_latch_ram         16C   program.psm
   set_ram_inactive      16F   program.psm
 * reset_flags           172   program.psm
   print_del             176   program.psm
   print_mem_full        18F   program.psm
   print_volume          1AE   program.psm
   print_v_meter         1BC   program.psm
   print_del_all         1C3   program.psm
   print_empty           1E0   program.psm
   print_messages        1F9   program.psm
   print_one             21E   program.psm
   print_two             224   program.psm
   print_three           22A   program.psm
   print_four            230   program.psm
   print_five            236   program.psm
   print_play            23C   program.psm
   print_record          253   program.psm
   print_indic           26C   program.psm
   print_box             271   program.psm
   print_blank           276   program.psm
   print_arrow           27B   program.psm
   print_deleting        280   program.psm
   write_char            2AA   program.psm
   clear_display         2B3   program.psm
   res_ram_loc_top       2BE   program.psm
 * res_ram_loc_bot       2C8   program.psm
   delay_char            2D2   program.psm
   delay_clear           2D6   program.psm
   delay_1us             2DA   program.psm
   delay_2us             2ED   program.psm
   delay_10us            2F0   program.psm
   delay_40us            2FB   program.psm
   delay_p6ms            300   program.psm
   delay_1ms             30F   program.psm
   delay_10ms            329   program.psm
   ISR                   334   program.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD            192
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD              28
 ADDCY             -
 SUB              12
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE          64
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             9
 OUTPUT           51
 OUTPUTK           -

 STORE            20
 FETCH            20

 DISABLE          47
 ENABLE            2
 RETURNI           1

 JUMP             98
 JUMP@             -
 CALL            246
 CALL@             -
 RETURN           32
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
